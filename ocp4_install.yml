---

- name: Deploy OpenShift 4 Environment
  hosts: localhost
  gather_facts: no
  vars:
    master_ips: []
    worker_ips: []
    approve_csrs: !unsafe oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' | xargs oc adm certificate approve
  vars_files:
    - ocp4_vars.yml
    - passwd.yml

  tasks:
    - name: Collect master ips
      set_fact:
        master_ips: "{{ master_ips + [hostvars[item]['ansible_host']] }}"
      loop: "{{ groups['masters'] }}"

    - name: Collect worker ips
      set_fact:
        worker_ips: "{{ worker_ips + [hostvars[item]['ansible_host']] }}"
      loop: "{{ groups['workers'] }}"

    - name: Check for RHCOS image
      stat:
        path: "{{ terraform['image_path'] }}"
      register: rhcos_stat

    - name: Download RHCOS
      get_url:
        url: "{{ rhcos_download_url }}"
        dest: "/tmp/{{ rhcos_download_url.split('/')[-1] }}"
      when: not rhcos_stat.stat.exists

    - name: Extract RHCOS image
      command: "gunzip /tmp/{{ rhcos_download_url.split('/')[-1] }}"
      when: not rhcos_stat.stat.exists

    - name: Move RHCOS image to image_path
      command: "mv /tmp/{{ rhcos_download_url.split('/')[-1].split('.')[:-1] | join('.') }} {{ rhcos_path }}"
      when: not rhcos_stat.stat.exists
      become: true

    - name: Check for openshift_installer
      stat:
        path: "{{ installer_path }}/openshift-install"
      register: installer_stat

    - name: Download installer
      unarchive:
        src: "{{ installer_download_url }}"
        dest: "{{ installer_path }}"
        exclude: "README.md"
        remote_src: True
      when: not installer_stat.stat.exists

    - name: Install terraform
      include_tasks: terraform_install.yml

    - name: Configure dnsmasq
      block:
      - name: dnsmasq - Add dns entries
        template:
          src: dns-ocp4.conf.j2
          dest: /etc/dnsmasq.d/dns-ocp4.conf
          owner: root
          group: root
          mode: 0644

      - name: dnsmasq - Restart service
        service:
         name: dnsmasq
         state: restarted
      when: configure_dnsmasq
      become: true

    - name: Configure haproxy
      block:
      - name: HAProxy - Add to http frontend
        lineinfile:
          path: /etc/haproxy/haproxy.cfg
          insertafter: "frontend http-in"
          line: "    use_backend ocp4-http if { hdr(host) -m end .{{ network['domain'] }} }"
  
      - name: haproxy - Add to https frontend
        lineinfile:
          path: /etc/haproxy/haproxy.cfg
          insertafter: "frontend https-in"
          line: "    use_backend ocp4-https if { req.ssl_sni -m end .{{ network['domain'] }} }"
  
      - name: haproxy - Add backends
        blockinfile:
          path: /etc/haproxy/haproxy.cfg
          marker: "# {mark} ANSIBLE MANAGED BLOCK OCP4"
          block: |
            #---------------------------------------------------------------------
            # ocp4 backends
            #---------------------------------------------------------------------
  
            backend ocp4-http
            {% for ip in worker_ips %}
                server worker-{{loop.index}} {{ ip }}:80 check
            {% endfor %}
  
            backend ocp4-https
                mode tcp
                option tcplog
            {% for ip in worker_ips %}
                server worker-{{loop.index}} {{ ip }}:443 check
            {% endfor %}
  
            listen ocp4-api
                mode tcp
                option tcplog
                bind *:6443
            {% for host in groups['bootstrap'] %}
                server bootstrap-{{loop.index}} {{ hostvars[host]['ansible_host'] }}:6443 check
            {% endfor %}
            {% for ip in master_ips %}
                server master-{{loop.index}} {{ ip }}:6443 check
            {% endfor %}
  
            listen ocp4-mc
                mode tcp
                option tcplog
                bind *:22623
            {% for host in groups['bootstrap'] %}
                server bootstrap-{{loop.index}} {{ hostvars[host]['ansible_host'] }}:22623 check
            {% endfor %}
            {% for ip in master_ips %}
                server master-{{loop.index}} {{ ip }}:22623 check
            {% endfor %}
  
      - name: haproxy - Restart service
        service:
          name: haproxy
          state: restarted
      when: configure_haproxy
      become: true

    - name: Delete existing install directory
      file:
        path: "{{ install_dir }}"
        state: absent

    - name: Create install directory
      file:
        path: "{{ install_dir }}"
        state: directory
        recurse: true

    - name: Copy install-config.yaml to install directory
      copy:
        src: "install-config.yaml"
        dest: "{{ install_dir }}"

    - name: Update install-config.yaml domain
      replace:
        dest: "{{ install_dir }}/install-config.yaml"
        regexp: "^(baseDomain: ).*"
        replace: '\1{{ network["domain"].split(".")[1:] | join(".") }}'

    - name: Update install-config.yaml name
      replace:
        dest: "{{ install_dir }}/install-config.yaml"
        regexp: "^(metadata:\n  name: ).*"
        replace: '\1{{ network["domain"].split(".")[0] }}'

    - name: Update install-config.yaml pull secret
      replace:
        dest: "{{ install_dir }}/install-config.yaml"
        regexp: "^(pullSecret: ').*(')"
        replace: '\1{{ pull_secret }}\2'

    - name: Update install-config.yaml ssh key
      replace:
        dest: "{{ install_dir }}/install-config.yaml"
        regexp: "^(sshKey: ').*(')"
        replace: '\1{{ item }}\2'
      with_file:
        - "{{ authorized_key }}"

    - name: Create manifests
      command: "{{ installer_path }}/openshift-install create manifests --dir={{ install_dir }}"

    - name: Set mastersSchedulable to false
      replace:
        path: "{{ install_dir }}/manifests/cluster-scheduler-02-config.yml"
        regexp: "mastersSchedulable: true"
        replace: "mastersSchedulable: false"

    - name: Create ignition files
      command: "{{ installer_path }}/openshift-install create ignition-configs --dir={{ install_dir }}"

    - name: Copy ignition files to web directory
      copy:
        src: "{{ item }}"
        dest: "{{ ignition_http_path }}"
      with_fileglob:
        - "{{ install_dir }}/*.ign"
      become: true

    - name: Provision VMs
      terraform:
        binary_path: "{{ terraform['binary_path'] }}/terraform"
        project_path: "{{ terraform['project_path'] }}"
        force_init: true
        state: present
        variables:
          ocp_version: 4
          image_path: "{{ terraform['image_path'] }}"
          memory: "{{ terraform['memory'] }}"
          vcpu: "{{ terraform['vcpu'] }}"
          domain: "{{ network['domain'] }}"
          dns:  "{{ network['dns'] }}"
          interface: "{{ network['interface'] }}"
          bootstrap_ip: "{{ hostvars[ (groups['bootstrap'][0]) ]['ansible_host']}}"
          master_ips: "{{ master_ips | join(',') }}"
          worker_ips: "{{ worker_ips | join(',') }}"
          cidr:  "{{ network['cidr'] }}"
          gateway:  "{{ network['gateway'] }}"
          dns:  "{{ network['dns'] }}"

    - name: Enable bootstrap nodes in haproxy
      replace:
        path: /etc/haproxy/haproxy.cfg
        regexp: '([ \t]*)#(\s*server bootstrap-1.*)'
        replace: '\1\2'
      become: true

    - name: Restart haproxy service
      service:
        name: haproxy
        state: restarted
      become: true
    
    - name: Wait for cluster bootstrap. This will take a while...
      command: "{{ installer_path }}/openshift-install --dir={{ install_dir }} wait-for bootstrap-complete --log-level=info"

    - name: Disable bootstrap nodes in haproxy
      replace:
        path: /etc/haproxy/haproxy.cfg
        regexp: '(server bootstrap-1)'
        replace: '#\1'
      become: true

    - name: Restart haproxy service
      service:
        name: haproxy
        state: restarted
      become: true

    - name: Shut down bootstrap VM
      virt:
        name: "{{ hostvars[ (groups['bootstrap'][0]) ]['inventory_hostname']}}.{{ network['domain'] }}"
        state: shutdown
      become: true

    - name: Wait for node-bootstrapper CSRs
      shell: "oc get csr | grep system:serviceaccount:openshift-machine-config-operator:node-bootstrapper | grep Pending | wc -l"
      register: csr_result
      until: "csr_result.stdout|int == worker_ips|length"
      retries: 60
      delay: 10
      environment:
        KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

    - name: Sign pending CSRs
      shell: "{{ approve_csrs }}"
      environment:
        KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

    - name: Wait for worker CSRs
      shell: "oc get csr | grep system:node:{{ item }}"
      register: csr_result
      until: "'Pending' in csr_result.stdout"
      retries: 60
      delay: 10
      loop: "{{ groups['workers'] }}"
      environment:
        KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

    - name: Sign pending CSRs
      shell: "{{ approve_csrs }}"
      environment:
        KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

    - name: Wait for cluster install to complete. This will take a while...
      command: "{{ installer_path }}/openshift-install --dir={{ install_dir }} wait-for install-complete --log-level=info"
      register: install_result

    - name: Install complete
      debug:
        msg: "{{ install_result.stdout }}"

    - name: Configure registry for emptyDir storage
      k8s:
        kubeconfig: "{{ install_dir }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: imageregistry.operator.openshift.io/v1
          kind: Config
          metadata:
            name: cluster
          spec:
            managementState: "Managed"
            storage:
              emptyDir: {}

    - name: Add htpasswd file secret
      k8s:
        kubeconfig: "{{ install_dir }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: htpass-secret
            namespace: openshift-config
          type: Opaque
          data:
            htpasswd: "{{ lookup('file', './files/htpasswd.openshift') | b64encode }}"

    - name: Add htpasswd identity provider
      k8s:
        kubeconfig: "{{ install_dir }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: config.openshift.io/v1
          kind: OAuth
          metadata:
            name: cluster
          spec:
            identityProviders:
            - name: htpasswd_provider
              mappingMethod: claim
              type: HTPasswd
              htpasswd:
                fileData:
                  name: htpass-secret

    - name: Give admin user cluster-admin privileges
      k8s:
        kubeconfig: "{{ install_dir }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: cluster-admin-admin
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: admin
